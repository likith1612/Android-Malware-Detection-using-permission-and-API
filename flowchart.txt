1. Importing the packages
2. Exploring the dataset 
	Drebin
	Malgenome
	CIC_MALDROID2020
3. Data Processing
Removing Duplicate Data
Drop Cleaning  
4. Visualization Data using Seaborn and Matplotlib
5. Feature Selection 
	- Selecting the X and y  Data
6. Splitting the data to train and test
7. Building the model
	- Drebin 
		- API + Permission
			Logistic Regression
			Support VEctor Machine
			KNN
			Random Forest
			Decision Tree
			Stacking Classifier (RF+ MLP with LightGBM)
		- Only API
			Logistic Regression
			Support VEctor Machine
			KNN
			Random Forest
			Decision Tree
			Stacking Classifier (RF+ MLP with LightGBM)
		- Only Permission
			Logistic Regression
			Support VEctor Machine
			KNN
			Random Forest
			Decision Tree
			Stacking Classifier (RF+ MLP with LightGBM)
	- Malgenome 
		- API + Permission
			Logistic Regression
			Support VEctor Machine
			KNN
			Random Forest
			Decision Tree
			Stacking Classifier (RF+ MLP with LightGBM)
		- Only API
			Logistic Regression
			Support VEctor Machine
			KNN
			Random Forest
			Decision Tree
			Stacking Classifier (RF+ MLP with LightGBM)
		- Only Permission
			Logistic Regression
			Support VEctor Machine
			KNN
			Random Forest
			Decision Tree
			Stacking Classifier (RF+ MLP with LightGBM)
	- CIC_MALDROID2020 
		- API + Permission
			Logistic Regression
			Support VEctor Machine
			KNN
			Random Forest
			Decision Tree
			Stacking Classifier (RF+ MLP with LightGBM)
		- Only API
			Logistic Regression
			Support VEctor Machine
			KNN
			Random Forest
			Decision Tree
			Stacking Classifier (RF+ MLP with LightGBM)
		- Only Permission
			Logistic Regression
			Support VEctor Machine
			KNN
			Random Forest
			Decision Tree
			Stacking Classifier (RF+ MLP with LightGBM)
8. Training and Building the model
9. Flask Framework with Sqlite for signup and signin
10. User gives input
11. the given input preprocessed and with trained model is used for predicting the readmission
12. final outcome is displayed

Extension
----------
In the base paper the author mentioned to use differ three diff. Malware feature dataset with Machine learning models like Logistic Regression, Support VEctor Machine, KNN,Random Forest,Decision Tree which got 97%, 98% and 98% of accuracy for three dataset respectively as per author, 
As an extension we applied an ensemble method  combining the predictions of multiple individual models to produce a more robust and accurate final prediction. 
However, we can further enhance the performance by exploring other ensemble techniques such as Stacking Classifier which got 99% accuracy,
As an extension we can build the front end using the flask framework for user testing and with user authentication.


Note: we develpop the frontend for Malgenome dataset based on API + Premission version which we reduced the column size to 22, for other datsaset the column size is too
long, so we avoid it.